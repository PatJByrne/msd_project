# clear memory
rm(list=ls())
x <- seq(-10, 10, by = 0.01)
## y
y <- x ^ 2 + rnorm(length(x), 0, 5)
# plot it
plot(x,y)
y <- x ^ 2 + rnorm(length(x), 0, 1)
plot(x,y)
y <- x ^ 2 + rnorm(length(x), 0, 5)
plot(x,y)
# make it fancy
library(ggplot2)
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
# even fancier, please
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
# even fancier, please
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
geom_point()
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point()
ggplot(data.frame(X = x, Y = y), aes(x = X, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
x.2 <- x ^ 2
plot(x.2,y)
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point()
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point()
geom_smooth(se = FALSE)
# now make it fancy with a smooth curve learned from lm
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
x.2 <- x ^ 2
plot(x.2,y)
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point()
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point()
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data.frame(XSquared = x.2, Y = y), aes(x = XSquared, y = Y)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
lm.out<-lm(y~x)
lm.out$coefficients
lm.out<-lm(y~1+x)
lm.out$coefficients
lm.out<-lm(y~x.2)
lm.out$coefficients
lm.out<-lm(y~x.2+x)
lm.out$coefficients
x <- seq(0, 1, by = 0.01)
y <- sin(2 * pi * x) + rnorm(length(x), 0, 0.1)
df <- data.frame(X = x, Y = y)
df <- transform(df, X2 = X ^ 2)
df <- transform(df, X3 = X ^ 3)
df <- transform(df, X4 = X ^ 4)
df <- transform(df, X5 = X ^ 5)
df <- transform(df, X6 = X ^ 6)
df <- transform(df, X7 = X ^ 7)
df <- transform(df, X8 = X ^ 8)
df <- transform(df, X9 = X ^ 9)
df <- transform(df, X10 = X ^ 10)
df <- transform(df, X11 = X ^ 11)
df <- transform(df, X12 = X ^ 12)
df <- transform(df, X13 = X ^ 13)
df <- transform(df, X14 = X ^ 14)
df <- transform(df, X15 = X ^ 15)
# fit to little polynomial
summary(lm(Y ~ X + X2 + X3, data = df))
summary(
lm(
Y ~
X + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 + X12 + X13 + X14,
data = df)
)
summary(lm(Y ~ poly(X, degree = 14), data = df))
install.packages("glmnet", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("ggplot2", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("ggplot2", verbose = TRUE, dependencies = TRUE,
install.packages("dplyr", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("scales", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("ggplot2", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("dplyr", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("scales", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
install.packages("reshape", verbose=TRUE, dependencies = TRUE, repos="http://cran.us.r-project.org")
library(dplyr)
library(ggplot2)
library(scales)
library(reshape)
theme_set(theme_bw()) # a theme with a white background
geom.mean <- function(x,dx=0.01) {
10^mean(log10(x+dx))-dx
}
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
library(glmnet)
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
# define x as a bunch of random data
# NB: dim(x)=1000 x 100
x=matrix(rnorm(n*p),n,p)
# make a vector of lenght nzc (=10) of random #s
beta=rnorm(nzc)
# NB: %*% is matrix mult
fx= x[,seq(nzc)] %*% beta
# regression:
# ====
eps=rnorm(n)*5
# define y
# y=drop(fx+eps)
y=fx+eps
# do cv curve and show coeffs
# L1
cvob1=cv.glmnet(x,y)
plot(cvob1)
# behold a sparse model. thanks to L1=lasso
coef(cvob1)
# L2
cvob1=cv.glmnet(x,y,alpha=0)
plot(cvob1)
# bummer.
coef(cvob1)
# classification:
# ====
# now squish fx via logit
px=exp(fx)
px=px/(1+px)
# make a "binary"/"dichotomous" random variable
ly=rbinom(n=length(px),prob=px,size=1)
cvob3a=cv.glmnet(x,ly,family="binomial",type.measure="auc")
# regularization path
plot(glmnet(x,y))
# what if L2?
plot(glmnet(x,y,alpha=0))
adults <- filter(users, age >= 18 & age <= 65,daily.views>0)
users <- read.table(gzfile('users.tsv.gz'), header=T, sep="\t")
histogram(teams$Total.Points, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
library(lattice)
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
histogram(teams$Total.Points, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
abline( v = mean(teams$Total.Points) , col = "red")
dev.off()
# plot(teams$team.ID,teams$Total.Points)
library(plyr)
library(lattice)
library(latticeExtra)
# clear memory
rm(list=ls())
# read data
route_data <- read.csv("clean_data/team_routes.csv", )
team_data <- read.csv("clean_data/team_info_score.csv", )
##initial summaries:
#Score:
summary(team_data$Score)
#Penalty:
summary(team_data$Penalty)
##grouping by gender:
# new data frame for women
women <- rbind(team_data[grep("W3", team_data$Class), ] , team_data[grep("W6", team_data$Class), ])
png(file = "figures/women.png",width = 2400, height = 2400, res=600)
histogram(~Score|Time.Limit, data = women, type = "count",
main="Number of teams of Women\n within a score range")
dev.off()
summary(women$Score)
# new data frame for men
men <- rbind(team_data[grep("M3", team_data$Class), ] , team_data[grep("M6", team_data$Class), ])
png(file = "figures/men.png",width = 3000, height = 3000, res=600)
histogram(~Score|Time.Limit, data = men, type = "count",
main="Number of teams of Men\n within a score range")
dev.off()
summary(men$Score)
# new data frame for mixed groups
both <- rbind(team_data[grep("B3", team_data$Class), ], team_data[grep("B6", team_data$Class), ])
png(file = "figures/both.png",width = 3000, height = 3000, res=600)
histogram(~Score|Time.Limit, data = both, type = "count",
main="Number of teams with both gender representation\n within a score range")
dev.off()
summary(both$Score)
## team-wise analysis:
#no of points covered by each team
no_of_points <- data.frame(table(route_data$team.ID))
colnames(no_of_points) <- c("team.ID","Total.Points")
#total time per point
total_time <- data.frame(route_data[route_data$Checkpoint == "F",c("team.ID", "Team.Name" , "Total.Time")])
#merge total time & no of points of one team
teams <- merge(total_time[,c("team.ID", "Team.Name", "Total.Time")], no_of_points, by="team.ID")
#calculate time per point
teams$Total.Time <- strptime(teams$Total.Time , "%H:%M:%S")
#converts time from integer to list to perform arithmetic operations
teams$Time.in.minutes <- teams$Total.Time[[1]]/60 + teams$Total.Time[[2]] + teams$Total.Time[[3]]*60
##plot team vs time taken
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
histogram(teams$Total.Points|Time.Limit, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
abline( v = mean(teams$Total.Points) , col = "red")
dev.off()
png(file = "figures/time_vs_points.png",width = 3000, height = 3000, res=600)
plot(teams$Time.in.minutes,teams$Total.Points, main="Comparison of points crossed\n for 3-hour & 6-hour teams",
xlab = "Total time taken", ylab = "Total checkpoints crossed")
dev.off()
teams$Time.per.point <- teams$Time.in.minutes/teams$Total.Points
route_data$Total.Time <- strptime(route_data$Total.Time , "%H:%M:%S")
route_data$Total.Time.In.Minutes <- route_data$Total.Time[[1]]/60 + route_data$Total.Time[[2]] + route_data$Total.Time[[3]]*60
route_data$Split <- strptime(route_data$Split , "%H:%M:%S")
route_data$Split <- route_data$Split[[1]]/60 + route_data$Split[[2]] + route_data$Split[[3]]*60
###combine total time of a team with points collected
all_data <- merge(team_data,route_data,by="team.ID")[,c("team.ID","Time.Limit","Borrow","Class","Rank","Club","Score","Checkpoint","Split")]
##find correlations:
#between "Borrow" and Score
bwplot(all_data$Score~all_data$Borrow)
abline(h=mean(all_data$Score),col = "red")
xyplot(Score~Borrow, data=all_data)
setwd("~/MSD/msd_project")
route_data <- read.csv("clean_data/team_routes.csv", )
team_data <- read.csv("clean_data/team_info_score.csv", )
##initial summaries:
#Score:
summary(team_data$Score)
#Penalty:
summary(team_data$Penalty)
##grouping by gender:
# new data frame for women
women <- rbind(team_data[grep("W3", team_data$Class), ] , team_data[grep("W6", team_data$Class), ])
png(file = "figures/women.png",width = 2400, height = 2400, res=600)
histogram(~Score|Time.Limit, data = women, type = "count",
main="Number of teams of Women\n within a score range")
dev.off()
summary(women$Score)
# new data frame for men
men <- rbind(team_data[grep("M3", team_data$Class), ] , team_data[grep("M6", team_data$Class), ])
png(file = "figures/men.png",width = 3000, height = 3000, res=600)
histogram(~Score|Time.Limit, data = men, type = "count",
main="Number of teams of Men\n within a score range")
dev.off()
summary(men$Score)
# new data frame for mixed groups
both <- rbind(team_data[grep("B3", team_data$Class), ], team_data[grep("B6", team_data$Class), ])
png(file = "figures/both.png",width = 3000, height = 3000, res=600)
histogram(~Score|Time.Limit, data = both, type = "count",
main="Number of teams with both gender representation\n within a score range")
dev.off()
summary(both$Score)
## team-wise analysis:
#no of points covered by each team
no_of_points <- data.frame(table(route_data$team.ID))
colnames(no_of_points) <- c("team.ID","Total.Points")
#total time per point
total_time <- data.frame(route_data[route_data$Checkpoint == "F",c("team.ID", "Team.Name" , "Total.Time")])
#merge total time & no of points of one team
teams <- merge(total_time[,c("team.ID", "Team.Name", "Total.Time")], no_of_points, by="team.ID")
#calculate time per point
teams$Total.Time <- strptime(teams$Total.Time , "%H:%M:%S")
#converts time from integer to list to perform arithmetic operations
teams$Time.in.minutes <- teams$Total.Time[[1]]/60 + teams$Total.Time[[2]] + teams$Total.Time[[3]]*60
##plot team vs time taken
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
histogram(teams$Total.Points|Time.Limit, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
abline( v = mean(teams$Total.Points) , col = "red")
dev.off()
png(file = "figures/time_vs_points.png",width = 3000, height = 3000, res=600)
plot(teams$Time.in.minutes,teams$Total.Points, main="Comparison of points crossed\n for 3-hour & 6-hour teams",
xlab = "Total time taken", ylab = "Total checkpoints crossed")
dev.off()
teams$Time.per.point <- teams$Time.in.minutes/teams$Total.Points
route_data$Total.Time <- strptime(route_data$Total.Time , "%H:%M:%S")
route_data$Total.Time.In.Minutes <- route_data$Total.Time[[1]]/60 + route_data$Total.Time[[2]] + route_data$Total.Time[[3]]*60
route_data$Split <- strptime(route_data$Split , "%H:%M:%S")
route_data$Split <- route_data$Split[[1]]/60 + route_data$Split[[2]] + route_data$Split[[3]]*60
###combine total time of a team with points collected
all_data <- merge(team_data,route_data,by="team.ID")[,c("team.ID","Time.Limit","Borrow","Class","Rank","Club","Score","Checkpoint","Split")]
##find correlations:
#between "Borrow" and Score
bwplot(all_data$Score~all_data$Borrow)
abline(h=mean(all_data$Score),col = "red")
xyplot(Score~Borrow, data=all_data)
#between "Club" and Score
bwplot(all_data$Score~all_data$Borrow)
xyplot(all_data$Score~all_data$Borrow)
plot(all_data$Score~all_data$Borrow)
plot(all_data$Score~all_data$Borrow,
xlab = "Team borrowed RSID", ylab = "Score")
abline(h=mean(all_data$Score),col = "red")
xyplot(Score~Club, data=all_data)
bwplot(Score~Club, data=all_data)
points <- ddply(all_data, .(Checkpoint), c("nrow"))
points <- points[order(-points$nrow),]
histogram(all_data$Checkpoint, xlab = "Checkpoints")
##top-rankers:
top <- data.frame(all_data[all_data$Rank<10, ])
top <- top[order(top$Rank),]
histogram(top$Checkpoint, xlab = "Checkpoints")
xyplot(Split~Rank|Checkpoint,data=top)  ##no correlation between time taken to a point and rank of the team
bwplot(Score~Class|Time.Lim,data=team_data,xlab="Type of team",main = "Variation in scores for different classes of teams")
bwplot(Score~Class|Time.Limit,data=team_data,xlab="Type of team",main = "Variation in scores for different classes of teams")
xyplot(Split~Rank|Checkpoint,data=top)  ##no correlation between time taken to a point and rank of the team
xyplot(all_data$Score~all_data$Borrow|Team.Name,
xlab = "Team borrowed RSID", ylab = "Score")
xyplot(all_data$Score~all_data$Borrow|all_data$Team.Name,
xlab = "Team borrowed RSID", ylab = "Score")
xyplot(all_data$Score~all_data$Borrow|all_data$team.ID,
xlab = "Team borrowed RSID", ylab = "Score")
xyplot(all_data$Score~all_data$Borrow,
xlab = "Team borrowed RSID", ylab = "Score")
plot(all_data$Score~all_data$Borrow,
xlab = "Team borrowed RSID", ylab = "Score")
abline(h=mean(all_data$Score),col = "red")
bwplot(all_data$Score~all_data$Borrow,
xlab = "Team borrowed RSID", ylab = "Score")
bwplot(all_data$Score~all_data$Borrow,
xlab = "Teams borrowing RSID", ylab = "Score")
bwplot(Score~Club, data=all_data)
plot(all_data$Club, all_data$Score,col = "red")
xyplot(Score~Club, data=all_data)
bwplot(Score~Club, data=all_data)
bwplot(Score~Club, data=all_data,
xlab = "Teams having club memberships", ylab = "Score")
bwplot(all_data$Score~all_data$Borrow,
xlab = "Teams borrowing RSID", ylab = "Score")
png(file = "figures/borrow_vs_score.png",width = 3000, height = 3000, res=600)
bwplot(all_data$Score~all_data$Borrow,
xlab = "Teams borrowing RSID", ylab = "Score")
dev.off()
#between "Club" and Score
png(file = "figures/club_vs_score.png",width = 3000, height = 3000, res=600)
bwplot(Score~Club, data=all_data,
xlab = "Teams having club memberships", ylab = "Score")
dev.off()
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
histogram(teams$Total.Points|Time.Limit, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
abline( v = mean(teams$Total.Points) , col = "red")
dev.off()
histogram(teams$Total.Points, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
png(file = "figures/point_dist.png",width = 3000, height = 3000, res=600)
histogram(teams$Total.Points, labels=teams$team.ID, main = "Distribution of total no. \nof checkpoints covered by team", xlab = "Total points covered", ylab = "No. of teams")
dev.off()
points <- ddply(all_data, .(Checkpoint), c("nrow"))
points <- points[order(-points$nrow),]
histogram(all_data$Checkpoint, xlab = "Checkpoints")
histogram(all_data$Checkpoint[all_data$Checkpoint != "F"], xlab = "Checkpoints")
png(file = "figures/point_analysis.png",width = 3000, height = 3000, res=600)
histogram(all_data$Checkpoint[all_data$Checkpoint != "F"], xlab = "Checkpoints")
dev.off()
View(all_data)
all_data <- all_data[order(all_data$Rank),]
View(all_data)
top <- data.frame(all_data[1:10, ])
View(top)
bottom <- data.frame(all_data[all_data$Rank>30, ])
histogram(top$Checkpoint, xlab = "Checkpoints")
View(top)
top <- data.frame(all_data[all_data$Rank<10, ])
View(top)
histogram(top$Checkpoint, xlab = "Checkpoints")
histogram(top$Checkpoint[top$Checkpoint != "F"], xlab = "Checkpoints")
bottom <- data.frame(all_data[all_data$Rank>30, ])
histogram(top$Checkpoint[top$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by top 10 teams")
histogram(bottom$Checkpoint[bottom$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by bottom 10 teams")
bottom <- data.frame(all_data[all_data$Rank>=30, ])
histogram(bottom$Checkpoint[bottom$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by bottom 10 teams")
top <- data.frame(all_data[all_data$Rank<=10, ])
bottom <- data.frame(all_data[all_data$Rank>=30, ])
histogram(top$Checkpoint[top$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by top 10 teams")
histogram(bottom$Checkpoint[bottom$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by bottom 10 teams")
xyplot(Split~Rank|Checkpoint,data=top)  ##no correlation between time taken to a point and rank of the team
xyplot(Split~Rank|Checkpoint,data=top[top$Checkpoint != "F"])  ##no correlation between time taken to a point and rank of the team
xyplot(Split~Rank|Checkpoint,data=top[top$Checkpoint != "F", ])  ##no correlation between time taken to a point and rank of the team
bwplot(Score~Class|Time.Limit,data=team_data,xlab="Type of team",main = "Variation in scores for different classes of teams")
all_data <- all_data[order(all_data$Rank),]
top <- data.frame(all_data[all_data$Rank<=10, ])
bottom <- data.frame(all_data[all_data$Rank>=30, ])
png(file = "figures/top_10.png",width = 3000, height = 3000, res=600)
histogram(top$Checkpoint[top$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by top 10 teams")
dev.off()
png(file = "figures/bottom_10.png",width = 3000, height = 3000, res=600)
histogram(bottom$Checkpoint[bottom$Checkpoint != "F"], xlab = "Checkpoints",
main = "Points covered by bottom 10 teams")
dev.off()
xyplot(Split~Rank|Checkpoint,data=top[top$Checkpoint != "F", ])  ##no correlation between time taken to a point and rank of the team
bwplot(Score~Class|Time.Limit,data=team_data,xlab="Type of team",main = "Variation in scores for different classes of teams")
